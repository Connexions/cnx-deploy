---
# Used to setup a deployment on localhost.

# Note, 'local' (the host name in the inventory)
#   should be assigned ``ansible_connection=local``.

# Ansible requires python2, while Ubuntu >=15 strictly uses Python3.
- name: "install python-minimal (2.7) for ansible"
  hosts:
    - archive
    - publishing
    - authoring
    - frontend
    - worker
    - database
  become: yes
  # This is the critical line, otherwise Ansible will try
  # to run python to gather facts.
  gather_facts: no
  pre_tasks:
    - name: 'install python2'
      raw: "sudo apt-get -y install python-minimal"

- name: "notify #cnx-stream of the deployment (start)"
  hosts:
    - archive
    - publishing
    - authoring
    - frontend
    - worker
    - database
  vars:
    msg: "Started deploy to {{ inventory_hostname }} :hourglass_flowing_sand:"
    channel: "#cnx-stream"
  tasks:
    - include: tasks/notify_slack.yml

# +++
# Source gathering
# +++

- name: package up source for shipment
  hosts: local
  tasks:
    - include: tasks/checkout.yml
    - include: tasks/archive_source.yml

- name: send source to hosts
  hosts:
    - archive
    - publishing
    - authoring
    - frontend
    - worker
    - database
  tasks:
    - include: tasks/plant_source.yml

- name: build webview
  hosts: local
  tasks:
    - include: tasks/build_webview.yml

# +++
# Persistence services
# +++

# TODO NFS mount

- name: install postgres database
  hosts:
    - database
  tasks:
    - include: tasks/install_postgres.yml
    - include: tasks/install_plxslt.yml
    - include: tasks/install_session_exec.yml
    - include: tasks/create_db_user.yml
      vars:
        db_user: "{{ archive_db_user }}"
        db_password: "{{ archive_db_password }}"
    - include: tasks/create_db.yml
      vars:
        db_owner: "{{ archive_db_user }}"
        db_name: "{{ archive_db_name }}"
    - include: tasks/create_db_user.yml
      vars:
        db_user: "{{ authoring_db_user }}"
        db_password: "{{ authoring_db_password }}"
    - include: tasks/create_db.yml
      vars:
        db_owner: "{{ authoring_db_user }}"
        db_name: "{{ authoring_db_name }}"
    - include: tasks/install_cnxml_dtd.yml

- name: install memcached
  hosts:
    - archive
    - publishing
    - authoring
  tasks:
    - include: tasks/install_memcached.yml

# +++
# Applications
# +++

# TODO Prerender

- name: install supervisor
  hosts:
    - archive
    - publishing
    - authoring
  tasks:
    - include: tasks/install_supervisor.yml

- name: install archive
  hosts: archive
  tasks:
    - include: tasks/install_archive.yml

- name: install publishing
  hosts: publishing
  tasks:
    - include: tasks/install_publishing.yml

- name: install authoring
  hosts: authoring
  tasks:
    - include: tasks/install_authoring.yml

- name: generate a self-signed certificate
  hosts: local
  vars:
    cert_password: "password"
    cert_domain: "*.{{ frontend_domain }}"
    cert_dir: "{{ inventory_dir }}/secrets/certs/cnx"
    cert_crt_filepath: "{{ cert_dir }}/cnx.crt"
    cert_key_filepath: "{{ cert_dir }}/cnx.key"
  tasks:
    - file:
        path: "{{ cert_dir }}"
        state: directory
    - stat: path="{{ cert_crt_filepath }}"
      register: crt_file
    - include: tasks/create_self_signed_cert.yml
      when: not crt_file.stat.exists

- name: install frontend
  hosts: frontend
  vars:
    cert_password: "password"
    cert_domain: "*.{{ frontend_domain }}"
    cert_dir: "{{ inventory_dir }}/secrets/certs/cnx"
    cert_crt_filepath: "{{ cert_dir }}/cnx.crt"
    cert_key_filepath: "{{ cert_dir }}/cnx.key"
  tasks:
    - include: tasks/ensure_shared_fs.yml
    - include: tasks/install_nginx.yml
    - include: tasks/install_varnish.yml
    - include: tasks/install_webview.yml
    - include: tasks/configure_ssl.yml

- name: "notify #cnx-stream of the deployment (end)"
  hosts:
    - archive
    - publishing
    - authoring
    - frontend
    - worker
    - database
  vars:
    msg: "Deploy to {{ inventory_hostname }} was successful :heavy_check_mark:"
    channel: "#cnx-stream"
  tasks:
    - include: tasks/notify_slack.yml
