---
# Installs archive with all the dependencies.

# +++
# Prerequisites
# +++

# TODO Kill this dependency by prebuilding or using packaged versions
#      of the application/library.
- name: install build utilities
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - build-essential
    - libxml2-dev
    - libxslt-dev
    - python-dev


- name: add apt-key for pgdg repository
  become: yes
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: add pgdg repository
  become: yes
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present
    update_cache: yes

- name: install postgres client
  become: yes
  apt:
    name: "{{ item }}"
    state: present
    # BBB (1-Feb-2016) ubuntu 14.04
    force: "{{ (ansible_distribution == 'Ubuntu' and  ansible_distribution_release == 'trusty') and 'yes' or 'no' }}"
  with_items:
    # - "postgresql-{{ postgres_version }}"
    - "postgresql-client-{{ postgres_version }}"

- name: install virtualenv
  become: yes
  apt:
    name: python-virtualenv
    state: present

# +++
# Install virtualenv(s)
# +++

- stat:
    path: "{{ root_prefix }}/var/cnx/venvs"
  register: venvs_dir

- name: ensure the venvs directory exists
  become: yes
  when: not venvs_dir.stat.exists
  file:
    path: "{{ root_prefix }}/var/cnx/venvs"
    state: directory
    mode: 0755
    owner: www-data

- name: set the owner of venvs directory
  become: yes
  file:
    path: "{{ root_prefix }}/var/cnx/venvs"
    state: directory
    recurse: yes
    owner: www-data

- name: create the archive virtualenv
  become: yes
  become_user: www-data
  pip:
    name: pip
    virtualenv: "{{ root_prefix }}/var/cnx/venvs/archive"
    virtualenv_python: python2

# +++
# Install
# +++

# FIXME (11-Feb-2016) Ansible >=2.1.0 required
# In order to use the pip module's ``state: forcereinstall`` option,
# we must upgrade to 2.1.0, which is not release yet.
#
# Using pip's ``--force-reinstall`` & ``--ignore-installed`` options do not
# work because they reinstall **everything**,
# which doesn't work because it tries to install some of our
# unreleased packages and then fails to find them.
#
# The blocks surrounded by ``# XXX`` & ``# /XXX`` should be removed
# as soon as possible. And this FIXME block ends with the closing /FIXME

- name: install archive packages
  become: yes
  become_user: www-data
  pip:
    name: "{{ item }}"
    virtualenv: "{{ root_prefix }}/var/cnx/venvs/archive"
    state: latest
  with_items:
    - db-migrator
    - pyramid_sawing

# XXX
- name: uninstall (local) archive packages
  become: yes
  become_user: www-data
  pip:
    name: "{{ item }}"
    virtualenv: "{{ root_prefix }}/var/cnx/venvs/archive"
    state: absent
  with_items:
    - cnx-query-grammar
    - rhaptos.cnxmlutils
    - cnx-epub
    - cnx-archive
# /XXX

- name: install (local) archive packages
  become: yes
  become_user: www-data
  pip:
    name: "{{ source_dir }}/{{ item }}"
    virtualenv: "{{ root_prefix }}/var/cnx/venvs/archive"
    ##state: forcereinstall
    state: present
  with_items:
    - cnx-query-grammar
    - rhaptos.cnxmlutils
    - cnx-epub
    - cnx-archive

# /FIXME

# +++
# Configure
# +++

- name: ensure the etc directories exists
  become: yes
  file:
    path: "{{ root_prefix }}/etc/{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - cnx
    - cnx/archive

- name: render configuration
  become: yes
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0744
    owner: root
    group: root
  with_items:
    - {src: "etc/cnx/archive/app.ini",
       dest: "{{ root_prefix }}/etc/cnx/archive/app.ini"}

# TODO make logging configuration files for pyramid_sawing

# +++
# Init databases
# +++

# Note, the setup current **assumes** that the publishing and archive database
# is the same database. There has been no reason to split these yet, so we won't.

# FIXME These initialize tasks run to failures. Ideally, it's be nice if
#       they gracefully bailed out with a meaningful message.

- name: initialize archive db
  command: "{{ root_prefix }}/var/cnx/venvs/archive/bin/cnx-archive-initdb {{ root_prefix }}/etc/cnx/archive/app.ini"
  register: archive_initdb_cmd
  failed_when: "archive_initdb_cmd.rc > 0 and 'Database is already initialized' not in archive_initdb_cmd.stderr"

- name: initialize db-migrator
  # XXX (16-Mar-2016) standalone installs aren't ideal, because they don't give
  #     the full picture of what archive is, but we'll roll with it for now.
  when: "(standalone_archive_install is defined and standalone_archive_install) and 'Database is already initialized' not in archive_initdb_cmd.stderr"
  command: "{{ root_prefix }}/var/cnx/venvs/archive/bin/dbmigrator --config {{ root_prefix }}/etc/cnx/archive/app.ini --context cnx-archive init"

- name: migrate database
  # XXX (16-Mar-2016) standalone installs aren't ideal, because they don't give
  #     the full picture of what archive is, but we'll roll with it for now.
  when: "standalone_archive_install is defined and standalone_archive_install"
  command: "{{ root_prefix }}/var/cnx/venvs/archive/bin/dbmigrator --config {{ root_prefix }}/etc/cnx/archive/app.ini --context cnx-archive migrate"

# +++
# Init service
# +++

- name: configure archive under supervisor
  become: yes
  template:
    src: etc/supervisor/conf.d/archive.conf
    dest: "{{ root_prefix }}/etc/supervisor/conf.d/archive.conf"
    mode: 0644
  register: supervisor_archive_conf

# Unforntuately supervisor's init script doesn't support reload,
# but supervisorctl does... so maybe there is a way to reload?
# FIXME (15-Mar-2016) We need more fine-grained restarting of supervisor
# managed processes
- name: restart supervisor
  become: yes
  service:
    name: supervisor
    state: restarted
    sleep: 5
